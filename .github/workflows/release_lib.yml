name: generate DBC and platformio library

on:
  pull_request:
    branches:
      - "main"
      - "develop"
  push:
    branches:
      - "main"  

jobs:
  build:
    runs-on: ubuntu-latest  
    steps:
      - name: Checkout code
        uses: actions/checkout@v4  # This action checks out your repository's code

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'  # Replace '3.x' with your Python version
          
      - name: install dependencies
        id: installdeps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        continue-on-error: true
      - name: Check on failures
        if: steps.installdeps.outcome != 'success'
        run: |
          pip install pipreqs
          pipreqs .
          pip install -r requirements.txt
          
      - name: Run Python script
        run: |
          git status 
          rm -rf ./dbc-output
          mkdir dbc-output
          python json_to_dbc.py can_descriptor.json ./dbc-output/ksu_ev_can Orion RMS_PM
          
      - name: Publish EV DBC file
        uses: actions/upload-artifact@v2
        with:
          name: ev-dbc-file
          path: |
            ./dbc-output/ksu_ev_can.dbc

            
  generate-and-release:
    needs: build
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/mathbrook/ccoderdbc:main
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: ev-dbc-file
          path: /dbc
      - name: generate code
        run: |
          mkdir -p /can_lib
          cd /app
          ./dbcc -s -o /can_lib /dbc/ksu_ev_can.dbc
          mkdir -p /output
          echo "{\n\"name\": \"can_lib\",\n\"version\": \"1.0.1\",\n\"build\": {\n\t\"flags\": [\n\t\t\"-Iinc\",\n\t\t\"-Ilib\",\n\t\t\"-Iconf\"\n\t]\n}\n}" >> /can_lib/library.json
          tar -czvf /output/can_lib.tar.gz /can_lib

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          draft: false
          prerelease: false

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: /output/can_lib.tar.gz
          asset_name: can_lib.tar.gz
          asset_content_type: application/zip
      - name: Upload dbc
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: /dbc/ksu_ev_can.dbc
          asset_name: ksu_ev_can.dbc
          asset_content_type: text/plain
